DAY 1
Your first PHP tag:
- php -h
- php -S localhost:8888
- <?php?>

Variables:
- echo "$greeting PHP";
- template literals using double quotes " " , same as ` ` in JavaScript

Conditional and Booleans:
- <?=  ?> // shorthand for echo

Arrays:
- <?php foreach () : ?>
   
  <?php endforeach; ?>

Functions and Filter:
- !empty($variable) // it checks whether the variable is both set and not empty

DAY 2
Lambda Functions:
- array_filter();

Separate Logic From the Template:
- <?php
  // code

  require 'index.view.php';
- Expected type 'iterable|object'. Found 'unset'.intelephense
  file > preference > setting > intelephense.diagnostics.enable > uncheck

DAY 3
Page Links:
- href="/filename.php"

DAY 4
PHP Partials:
- to remove duplication
- <?php require 'filepath'?>
- create variable in controller to make the content dynamic in partials or views
- ex. in controller $heading = 'About Us'; in partials or views <?= $heading ?>

Superglobals and Current Page Stylings:
- $_SERVER
- $_SERVER['REQUEST_URI']
- var_dump()
- var_dump($_SERVER['REQUEST_URI'])
- using functiont to determine the current url example:
  function urlIs($value) {
    return $_SERVER['REQUEST_URI'] === $value;
  }
- separate functions in php file and just require it in controller ex. require 'functions.php';

DAY 5
Make a PHP Router:
- index.php, entry point of the application
- parse_url(), separates path (or url/route) and query string in array index
- array_key_exists($key, $array), checks if the given key exist in given array
- route.php, all codes related to routing

DAY 6
PDO First Steps:
- prepared statements to prevent SQL injection.
- PDO::FETCH_ASSOC, remove duplication when fetching data in db
- PDO supports many databases while MySQLi is only specific to MySQL

DAY 7
Extract a PHP Database Class:
- Placing the code inside the __construct method of the Database class ensures that the database connection is established automatically whenever an instance of the class is created
- Database.php, the first letter is capital if the php file only contains class

Environments and Configuration Flexibility:
- http_build_query(), converts array into a query string-like format
- PDO::ATTR_DEFAULT_FETCH_MODE => PDO::FETCH_ASSOC, this sets the default fetch mode for the PDO connection to PDO::FETCH_ASSOC
- can also use return in a file then use require('filename.php') to get the return value
- config.php, serves as a centralized place to store configuration settings for an application

SQL Injection Vulnerabilities Explained:
- sample sql injection that drops a table
  http://localhost:8888/?id=4; drop table sample;
  // Vulnerable sql query
  $id = $_GET['id'];
  $query = "SELECT * FROM posts WHERE id = $id";
  $post = $db->query($query)->fetch();
- use prepared statement with bound parameters/placeholders to avoid sql injection
- never accept user input and inline it as part of the database query

DAY 7
Introduction to Authorization:
- $note['user_id'] is string(1) "1" even if the data type of it in databse is int, because by default many database drivers (e.g., PDO in PHP) return all column values as strings, regardless of their data types in the database.
- "Magic numbers" like the 403 in abort(403, 'Forbidden'); are hard-coded numeric values in code that have no clear meaning
- Using a named constant like abort(Response::FORBIDDEN, 'Forbidden') instead of a raw number eliminates confusion and follows good programming practices
- Using Response::FORBIDDEN is a best practice that makes your codebase cleaner, more maintainable, and easier to understand for yourself and others. It avoids the pitfalls of "magic numbers" and provides meaningful context to otherwise abstract values

DAY 8
Programming is Rewriting:
- return $this; // return the object or instance in able to use chain methods
- If you want to reuse a variable inside a method to another method in a class, declare the variable as a class property ex. public $statement; then use it in other class method ex. $this->statement
- Provides intuitive methods for common data retrieval patterns, reducing boilerplate code for consumers of the Database class

DAY 9
Intro to Forms and Request Methods:
- $_SERVER["REQUEST_METHOD"], get the request method ex. GET, POST

DAY 10
Always Escape Untrusted Input:
- sanitation
- htmlspecialchars(), Convert all applicable characters to HTML entities
- from this, <script>alert('dfsdfd')</script>
- to this, &lt;script&gt;alert('dfsdfd')&lt;/script&gt;

DAY 11
Intro to Forms and Request Methods:
- strlen()
- !empty() checks if a variable is not empty (i.e., it is not 0, false, null, "", [], or an unset variable)
- isset() checks if a variable is set/declared and not null
- ?? (null coalescing operator) provides a default value if the variable is not set or is null

Extract a Simple Validator Class:
- trim() removes spaces
- a pure function is a function that is not dependent upon state or values from the outside of the function
- programming is often described as rewriting because the process of developing software involves continuous iteration and improvement

DAY 12
Resourceful Naming Conventions:
- __DIR__ is a magic constant that represents the directory of the file in which it is used. It provides an absolute path to the directory where the script is located.

PHP Autoloading and Extractions:
- document root, typically the public folder and entry point(index.php) and assets
- -t <docroot> Specify document root <docroot> for built-in web server
- php -S localhost:8888 -t public
- BASE_PATH is an absolute path to the root of the project
- extract(), convert the associative array into a variable
- spl_autoload_register(), is used to automatically load class files when a class is instantiated. It eliminates the need to manually include or require files for each class.
- autoloading in PHP is a mechanism that allows you to automatically load classes when they are needed, without requiring explicit require or include statements for each class.

DAY 13
Namespacing: What, Why, How?
- namespacing is a powerful feature in PHP that helps avoid name conflicts, organizes code logically
- inside a class put namespace Name; at the top
- when using that class put use Name\ClassName at the top;
- or new Name\ClassName when instantiating
- str_replace($search, $replace, $subject);
- \ClassName, starts at the root and look for the class
- ClassName, start within the current namespace and then look for the class
- when working within a namespace, you must either fully qualify class names (\ClassName) or import them explicitly (use ClassName;)

Handle Multiple Request Methods From a Controller Action?
- header('location: /notes'); this sends an HTTP header to the browser instructing it to navigate to the specified URL
- exit(); ensures no further code is executed after the redirect

DAY 14
 Build a Better Router:
 - <input type="hidden" name="_method" value="DELETE"> same as @method('DELETE') in laravel blade

 One Request, One Controller:

DAY 15
Updating With PATCH Requests:
- PATCH for partial updates where only specific fields need modification
- PUT (commonly referred to as "UPDATE") when you need to replace the entire resource

DAY 16
PHP Sessions 101:
- session represents a period of interaction between a user and a system
- session_start() purpose is to make the $_SESSION superglobal available for storing and retrieving session data.
- session data is temporaray
- session storage in browser is part of JavaScript API not PHP
- Session Identification:
  -> when session_start() is called in PHP, a unique session ID is generated stored on the client side in a cookie named PHPSESSID
- Maintaining the Session:
  -> The session data is stored on the server (in files or another storage backend)
  -> The session ID (stored in the PHPSESSID cookie) allows the server to retrieve the correct session data for the client during subsequent requests
- Session Continuity:
  -> For every request, the browser sends the PHPSESSID cookie back to the server
  -> The server uses this ID to fetch the associated session data
- $_SESSION['key'] = 'value'; to save session data
- to see where the session data being saved:
  -> type in terminal php --info > find session.save_path > go to that directory > find the file name sess_cookieid > view the file to see the session data
- Deleting cookies removes the PHPSESSID cookie, which holds the session ID. Without this ID, the server cannot link the client to its stored session data, making the session inaccessible even if it still exists on the server

Register a New User:
- create route > create controller > create view
- $_SESSION['key'] ?? false
  -> if you want to check for both the existence of $_SESSION['key'] and ensure it has a truthy value
- isset($_SESSION['key'])
  -> if you only care about whether $_SESSION['key'] exists and is not null

Introduction to Middleware:
- find the last value of array, count($array) - 1; or array_key_last($array);
- (new Class)->method(); instantiates the class and immediately calls the method on the instance, without storing it in a variable

DAY 17
Manage Passwords Like This For The Remainder of Your Career:
- never store password in clear text

DAY 18
Log In and Log Outs:
- the value of PHPSESSID cookie is the session id
- session_regenerate_id(true); generates a new session ID and deletes the old session data file on the server when the true parameter is passed

DAY 19
Extract a Form Validation Object:
- namespace are always at the top of the file, example:
  <?php

  namespace Http\Forms;

  use Core\Validator;

  class LoginForm {

  }

Extract an Authenticator Class:
- use inline instantiation if you only used the object once

The PRG Pattern (and Session Flashing):
- Post/Redirect/Get
- Prevents Form Re-Submission
- Avoid browser alert warnings

DAY 20
Flash Old Form Data to the Session:
- use $default = '' in function param instead of returning hardcoded ?? '' for customization

Automatically Redirect Back Upon Failed Validations:
- $_SERVER['HTTP_REFERER']; previous url