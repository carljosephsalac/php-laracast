DAY 1
Your first PHP tag:
- php -h
- php -S localhost:8888
- <?php?>

Variables:
- echo "$greeting PHP";
- template literals using double quotes " " , same as ` ` in JavaScript

Conditional and Booleans:
- <?=  ?> // shorthand for echo

Arrays:
- <?php foreach () : ?>
   
  <?php endforeach; ?>

Functions and Filter:
- !empty($variable) // it checks whether the variable is both set and not empty

DAY 2
Lambda Functions:
- array_filter();

Separate Logic From the Template:
- <?php
  // code

  require 'index.view.php';
- Expected type 'iterable|object'. Found 'unset'.intelephense
  file > preference > setting > intelephense.diagnostics.enable > uncheck

DAY 3
Page Links:
- href="/filename.php"

DAY 4
PHP Partials:
- to remove duplication
- <?php require 'filepath'?>
- create variable in controller to make the content dynamic in partials or views
- ex. in controller $heading = 'About Us'; in partials or views <?= $heading ?>

Superglobals and Current Page Stylings:
- $_SERVER
- $_SERVER['REQUEST_URI']
- var_dump()
- var_dump($_SERVER['REQUEST_URI'])
- using functiont to determine the current url example:
  function urlIs($value) {
    return $_SERVER['REQUEST_URI'] === $value;
  }
- separate functions in php file and just require it in controller ex. require 'functions.php';

DAY 5
Make a PHP Router:
- index.php, entry point of the application
- parse_url(), separates path (or url/route) and query string in array index
- array_key_exists($key, $array), checks if the given key exist in given array
- route.php, all codes related to routing

DAY 6
PDO First Steps:
- prepared statements to prevent SQL injection.
- PDO::FETCH_ASSOC, remove duplication when fetching data in db
- PDO supports many databases while MySQLi is only specific to MySQL

DAY 7
Extract a PHP Database Class:
- Placing the code inside the __construct method of the Database class ensures that the database connection is established automatically whenever an instance of the class is created
- Database.php, the first letter is capital if the php file only contains class

Environments and Configuration Flexibility:
- http_build_query(), converts array into a query string-like format
- PDO::ATTR_DEFAULT_FETCH_MODE => PDO::FETCH_ASSOC, this sets the default fetch mode for the PDO connection to PDO::FETCH_ASSOC
- can also use return in a file then use require('filename.php') to get the return value
- config.php, serves as a centralized place to store configuration settings for an application

SQL Injection Vulnerabilities Explained:
- sample sql injection that drops a table
  http://localhost:8888/?id=4; drop table sample;
  // Vulnerable sql query
  $id = $_GET['id'];
  $query = "SELECT * FROM posts WHERE id = $id";
  $post = $db->query($query)->fetch();
- use prepared statement with bound parameters/placeholders to avoid sql injection
- never accept user input and inline it as part of the database query

DAY 7
Introduction to Authorization:
- $note['user_id'] is string(1) "1" even if the data type of it in databse is int, because by default many database drivers (e.g., PDO in PHP) return all column values as strings, regardless of their data types in the database.
- "Magic numbers" like the 403 in abort(403, 'Forbidden'); are hard-coded numeric values in code that have no clear meaning
- Using a named constant like abort(Response::FORBIDDEN, 'Forbidden') instead of a raw number eliminates confusion and follows good programming practices
- Using Response::FORBIDDEN is a best practice that makes your codebase cleaner, more maintainable, and easier to understand for yourself and others. It avoids the pitfalls of "magic numbers" and provides meaningful context to otherwise abstract values

DAY 8
Programming is Rewriting:
- return $this; // return the object or instance in able to use chain methods
- If you want to reuse a variable inside a method to another method in a class, declare the variable as a class property ex. public $statement; then use it in other class method ex. $this->statement
- Provides intuitive methods for common data retrieval patterns, reducing boilerplate code for consumers of the Database class

DAY 9
Intro to Forms and Request Methods:
- $_SERVER["REQUEST_METHOD"], get the request method ex. GET, POST

DAY 10
Always Escape Untrusted Input:
- sanitation
- htmlspecialchars(), Convert all applicable characters to HTML entities
- from this, <script>alert('dfsdfd')</script>
- to this, &lt;script&gt;alert('dfsdfd')&lt;/script&gt;

DAY 11
Intro to Forms and Request Methods:
- strlen()
- !empty() checks if a variable is not empty (i.e., it is not 0, false, null, "", [], or an unset variable)
- isset() checks if a variable is set/declared and not null
- ?? (null coalescing operator) provides a default value if the variable is not set or is null